const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const dbManager = require('./db-manager');
const logger = require('./logger');
const { startNotificationTask } = require('./notifications');


const bot = new TelegramBot(config.TELEGRAM_BOT_TOKEN, {polling: true});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
startNotificationTask(bot);

let adsData = {};
let photoTimers = {};

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;
    const webAppUrl = `https://${config.DOMAIN}/form?chat_id=${chatId}`;

    try {
        if (text === '/start') {
            await dbManager.createNewUser(msg);
            const sentMessage = await bot.sendMessage(chatId, `üì∞ –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Ñ–æ—Ä–º—É`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', web_app: { url: webAppUrl} }]
                    ]
                }
            });
            await bot.pinChatMessage(chatId, sentMessage.message_id);
        } else if (text && typeof text === 'string' && text.startsWith('@')) {
            const command = text.replace(/^@\S+\s/, ''); // –£–¥–∞–ª—è–µ—Ç `@–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞ `

            if (command.startsWith('/approve_ad')) { // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                const parts = command.split('_');

                if (parts.length < 4) {
                    await bot.sendMessage(chatId, '‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –û–∂–∏–¥–∞–µ—Ç—Å—è: /approve_ad_chatId_adId');
                    return;
                }

                const chatIdToPost = parts[2];
                const adId = parts[3];

                try {
                    const { messageIds, messageLink } = await postADtoChannel(adId, chatIdToPost);
                    await bot.sendMessage(chatId, `‚úÖ [–û–±—ä—è–≤–ª–µ–Ω–∏–µ](${messageLink}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ`, { parse_mode: 'Markdown' });
                    await dbManager.updateADpostedData(adId, messageIds);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
                    await bot.sendMessage(chatId, '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.');
                }
            } else if (command.startsWith('/reject_ad')) {  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                const parts = command.split('_');

                if (parts.length < 4) {
                    await bot.sendMessage(chatId, '‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –û–∂–∏–¥–∞–µ—Ç—Å—è: /reject_ad_chatId_adId');
                    return;
                }

                const chatIdToReject = parts[2];
                const adId = parts[3];

                try {
                    await bot.sendMessage(chatId, `‚ùó –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${adId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ`);
                    await bot.sendMessage(chatIdToReject, '‚ÄºÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.');
                    await dbManager.updateAd(adId, { is_active: false });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
                    await bot.sendMessage(chatId, '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.');
                }
            }
        } else if (text === '/test') {
            await bot.sendMessage(chatId, 'Open', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'Main', web_app: { url: `https://${config.DOMAIN}`} }],
                        [{ text: 'Ads', web_app: { url: `https://${config.DOMAIN}/ads`} }]
                    ]
                }
            });
        }


        if ((msg.media_group_id || msg.photo) && adsData[chatId]?.data.ad_type == 'rentOut') {
            const photoArray = msg.photo;
            const largestPhoto = photoArray[photoArray.length - 1];
            const fileId = largestPhoto.file_id;

            if (!adsData[chatId]) {
                adsData[chatId] = { photos: [], photoURLs: [] };
            }

            if (adsData[chatId].photos.length < 10) {
                adsData[chatId].photos.push(fileId);
            }

            if (photoTimers[chatId]) {
                clearTimeout(photoTimers[chatId]);
            }

            adsData[chatId].photoURLs.push(fileId);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
            photoTimers[chatId] = setTimeout(() => {

                if (adsData[chatId].photos.length === 10) {
                    approveAD(adsData[chatId], chatId);
                } else {
                    approvePhotoAD(adsData[chatId], chatId);
                }
                delete photoTimers[chatId];
            }, 2000);
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞:', err);
        logger.error(`Error processing message from ${chatId}: ${err}`);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
      }
});

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const userId = callbackQuery.from.id;
    const username = callbackQuery.from.username;
    const callbackData = callbackQuery.data;
    const currentPhotosCount = 10 - adsData[chatId]?.photos?.length;
    const city = adsData[chatId].data.city; // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    const targetChannel = config.cityChannels[city];

    try {
        if (callbackData === 'send_to_moderate') {

            const chatMember = await bot.getChatMember(targetChannel, userId); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
            const targetChannelURL = `https://t.me/${targetChannel.replace('@', '')}`;
            if (!['member', 'administrator', 'creator'].includes(chatMember.status)) {
                bot.sendMessage(chatId, `‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="${targetChannelURL}">–∫–∞–Ω–∞–ª</a> –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è`, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: targetChannelURL }]
                        ]
                    }
                });
                return;
            }

            if (adsData[chatId].photos && adsData[chatId].message) {
                const adId = await dbManager.saveADtoDB(adsData[chatId].data, adsData[chatId].photoURLs, targetChannel);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await sendToModerate(adsData[chatId], chatId, adId, userId, username);
                await bot.sendMessage(chatId, '‚è≥ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏...');
                bot.answerCallbackQuery(callbackQuery.id, { text: '‚è≥ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é', show_alert: false });
                await bot.deleteMessage(chatId, messageId);
            }
        } else if (callbackData === 'add_photo') {
            if (adsData[chatId].photos && adsData[chatId].message) {
                await bot.sendMessage(chatId, `‚¨ÜÔ∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ ${currentPhotosCount} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
            }

        } else if (callbackData === 'receive_notification') {
            const chatMember = await bot.getChatMember(targetChannel, userId); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
            const targetChannelURL = `https://t.me/${targetChannel.replace('@', '')}`;
            if (!['member', 'administrator', 'creator'].includes(chatMember.status)) {
                bot.sendMessage(chatId, `‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="${targetChannelURL}">–∫–∞–Ω–∞–ª</a> –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è`, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: targetChannelURL }]
                        ]
                    }
                });
                return;
            }

            const searchCriteriaID = await dbManager.saveSearchCritireaToDB(adsData[chatId].data);
            bot.answerCallbackQuery(callbackQuery.id, {text: 'üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', show_alert: false});
            bot.deleteMessage(chatId, messageId);

            const searchText = `–°–Ω–∏–º—É ${adsData[chatId].data.house_type === 'apartment' ? adsData[chatId].data.rooms + '-–∫–æ–º–Ω.–∫–≤–∞—Ä—Ç–∏—Ä—É' : adsData[chatId].data.house_type === 'room' ? '–∫–æ–º–Ω–∞—Ç—É' : '–¥–æ–º'} ${adsData[chatId].data.duration === 'long_time' ? '–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫' : '–ø–æ—Å—É—Ç–æ—á–Ω–æ'} –≤ –≥.${adsData[chatId].data.city}${adsData[chatId].data.district ? ', ' + adsData[chatId].data.district + ' —Ä-–Ω'  : ''}${adsData[chatId].data.microdistrict ? ', ' + adsData[chatId].data.microdistrict  : ''}
–¶–µ–Ω–∞: ${adsData[chatId].data.price_min}-${adsData[chatId].data.price_max} —Ç–≥.
`;

            const webAppUrlSC = `https://${config.DOMAIN}/autosearch`;
            const caption = `üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú—ã —Å–æ–æ–±—â–∏–º –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.\n\n\`${searchText}\``;
            const inlineKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîñ–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏', web_app: { url: webAppUrlSC} }]
                    ]
                }
            };
            await bot.sendMessage(chatId, caption, { parse_mode: 'Markdown', ...inlineKeyboard });

        } else if (callbackData === 'reject_notification') {
            bot.answerCallbackQuery(callbackQuery.id, {text: 'üóëÔ∏è –ü–æ–∏—Å–∫ —É–¥–∞–ª–µ–Ω', show_alert: false});
            bot.deleteMessage(chatId, messageId);

        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞:', err);
        logger.error(`Error processing callback query from ${chatId}: ${err}`);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
      }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
async function sendToModerate(ad, chatId, adId, userId, username) {
    const mediaGroup = await createMediaGroup(ad);
    await bot.sendMediaGroup(config.MODERATOR_ID, mediaGroup);

    const moderationMessage = `üîç –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} ID:${userId}`;
    const inlineKeyboard = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', switch_inline_query_current_chat: `/approve_ad_${chatId}_${adId}` },
                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', switch_inline_query_current_chat: `/reject_ad_${chatId}_${adId}` }
                ]
            ]
        }
    };    

    await bot.sendMessage(config.MODERATOR_ID, moderationMessage, { parse_mode: 'Markdown', ...inlineKeyboard });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async function postADtoChannel(adId, chatId) {
    const ad = await getAdDataFromDB(adId);
    const mediaGroup = await createMediaGroup(ad);
    const messageOnChannel = await bot.sendMediaGroup(ad.data.tg_channel, mediaGroup);
    const messageIds = messageOnChannel.map(message => message.message_id);
    const messageLink = `https://t.me/${ad.data.tg_channel.replace('@', '')}/${messageIds[0]}`;

    const caption = `‚úÖ [–û–±—ä—è–≤–ª–µ–Ω–∏–µ](${messageLink}) —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!`;

    const webAppUrlADS = `https://${config.DOMAIN}/ads`;
    const inlineKeyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üì∞ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', web_app: { url: webAppUrlADS} }]
            ]
        }
    };

    await bot.sendMessage(chatId, caption, { parse_mode: 'Markdown', ...inlineKeyboard });
    
    console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ ${messageIds[0]} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ`);
    return { messageIds, messageLink };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
async function approvePhotoAD(ad, chatId) {
    const currentPhotosCount = 10 - adsData[chatId].photos.length;
    const mediaGroup = await createMediaGroup(ad);

    await bot.sendMediaGroup(chatId, mediaGroup);

    await bot.sendMessage(chatId, `‚¨ÜÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ ${currentPhotosCount} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ`, {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'send_to_moderate' }, { text: '‚Ü©Ô∏è–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'add_photo' }],
              ],
            },
          });
    console.log('–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
async function approveAD(ad, chatId) {
    const mediaGroup = await createMediaGroup(ad);

    await bot.sendMediaGroup(chatId, mediaGroup);

    await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ', {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'send_to_moderate' }],
              ],
            },
          });

    console.log('–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
}

async function createMediaGroup(ad, includeCaption = true) {
    const trimmedMessage = ad.message?.length > 1024 
        ? ad.message.substring(0, ad.message.lastIndexOf(' ', 1024)) + '...' 
        : ad.message;

    return ad.photos.map((fileId, index) => ({
        type: 'photo',
        media: fileId,
        caption: includeCaption && index === 0 ? trimmedMessage : '',
        parse_mode: 'Markdown'
    }));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async function getAdDataFromDB(adId) {
    const ad = await dbManager.getAdById(adId);
    const roomTypeText = ad.room_type === 'room' ? '' : ad.room_type === 'bed_space' ? ' (–∫–æ–π–∫–æ-–º–µ—Å—Ç–æ)' : '';
    const roomLocationText = ad.room_location === 'apartment' ? '' :
                             ad.room_location === 'hostel' ? '–≤ —Ö–æ—Å—Ç–µ–ª–µ' :
                             ad.room_location === 'hotel' ? '–≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ' : '';

    const message = `
üè† *–°–¥–∞–µ—Ç—Å—è* ${ad.house_type === 'apartment' ? ad.rooms + '-–∫–æ–º–Ω.–∫–≤–∞—Ä—Ç–∏—Ä–∞' : ad.house_type === 'room' ? '–∫–æ–º–Ω–∞—Ç–∞' + roomTypeText + (roomLocationText ? ' ' + roomLocationText : '') : '–¥–æ–º'} ${ad.duration === 'long_time' ? '–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫' : '–ø–æ—Å—É—Ç–æ—á–Ω–æ'}, ${ad.area} –º¬≤${ad.floor_current && ad.floor_total ? `, ${ad.floor_current}/${ad.floor_total} —ç—Ç–∞–∂` : ''}${ad.bed_capacity ? ', —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç - ' + ad.bed_capacity : ''}
*–ê–¥—Ä–µ—Å:* –≥.${ad.city}, ${ad.district} —Ä-–Ω, ${ad.microdistrict ? ad.microdistrict + ', ' : ''} ${ad.address}
*–°–¥–∞–µ—Ç:* ${ad.author === 'owner' ? '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' : '–ø–æ—Å—Ä–µ–¥–Ω–∏–∫'}
*–¶–µ–Ω–∞:* ${ad.price} ‚Ç∏
*–ö–æ–Ω—Ç–∞–∫—Ç—ã:* ${ad.phone} ${[ad.whatsapp ? `[WhatsApp](https://api.whatsapp.com/send?phone=${ad.phone})` : '', ad.telegram && ad.tg_username ? `[Telegram](https://t.me/${ad.tg_username})` : ''].filter(Boolean).join(' ')}
üõãÔ∏è *–£–¥–æ–±—Å—Ç–≤–∞*: ${[
        ad.toilet ? ad.toilet : '',
        ad.bathroom ? ad.bathroom : '',
        ad.furniture ? ad.furniture : '',
        ad.facilities ? ad.facilities : ''
    ].filter(Boolean).join(', ')}
üìú *–ü—Ä–∞–≤–∏–ª–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è*: ${[
        ad.rental_options ? ad.rental_options : ''
    ].filter(Boolean).join(', ')}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ*:
${ad.description ? ad.description : ''}
`;

    return {
        data: ad,
        message: message.trim(),
        photos: ad.photos || [],
        photoURLs: ad.photoURLs || []
    };
}

async function getPhotoUrl(fileId) {
    const file = await bot.getFile(fileId);
    return `https://api.telegram.org/file/bot${config.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
}

module.exports = { bot, adsData };