const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
require('dotenv').config();

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {polling: true});
const app = express();

app.use(express.json());
app.use(cors());

let adsData = {};
let photoTimers = {};

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const webAppUrl = `https://5084-5-251-196-243.ngrok-free.app/form?chat_id=${msg.chat.id}`;

    if (text === '/start') {
        await bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', web_app: { url: webAppUrl} }]
                ]
            }
        });
    }

    if (msg.media_group_id || msg.photo) {
        const photoArray = msg.photo;
        const largestPhoto = photoArray[photoArray.length - 1];
        const fileId = largestPhoto.file_id;

        if (!adsData[chatId]) {
            adsData[chatId] = { photos: [] };
        }

        if (adsData[chatId].photos.length < 10) {
            adsData[chatId].photos.push(fileId);
        }

        if (photoTimers[chatId]) {
            clearTimeout(photoTimers[chatId]);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        photoTimers[chatId] = setTimeout(() => {
            // –ö–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –≤—ã–∑—ã–≤–∞–µ–º approvePhotoAD
            if (adsData[chatId].photos.length === 10) {
                approveAD(adsData[chatId], chatId);
            } else {
                approvePhotoAD(adsData[chatId], chatId);
            }
            delete photoTimers[chatId]; // –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        }, 2000);
    }

});

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    try {
        if (data === 'approved') {
            if (adsData[chatId].photos && adsData[chatId].message) {
                postADtoChannel(adsData[chatId], chatId);
            }
        } else if (data === 'add_photo') {
            await bot.sendMessage(chatId, '‚¨ÜÔ∏è –î–æ–±–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞:', err);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫-–¥–∞–Ω–Ω—ã—Ö.');
      }
});

app.post('/web-data', async (req, res) => {
    const {
        chatId,
        queryId,
        city,
        dishwasher,
        district,
        duration,
        family,
        floor_current,
        floor_total,
        fridge,
        house_type,
        iron,
        kitchen,
        max_guests,
        microdistrict,
        microwave,
        phone,
        price,
        rooms,
        separate_toilet,
        shower,
        single,
        sleeping_places,
        smoke_allowed,
        stove,
        telegram,
        tg_username,
        tv,
        wardrobe,
        washing_machine,
        whatsapp,
        wifi,
        with_child,
        with_pets
    } = req.body;

    console.log('Received data:', req.body);
    
    try {
        const message = `
üè† *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∂–∏–ª—å—è*:
- –¢–∏–ø –∂–∏–ª—å—è: ${house_type === 'apartment' ? '–ö–≤–∞—Ä—Ç–∏—Ä–∞' : house_type}
- –ê–¥—Ä–µ—Å: –≥.${city}, ${district} —Ä-–Ω, ${microdistrict}
- –≠—Ç–∞–∂: ${floor_current}/${floor_total}
- –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: ${duration === 'long_time' ? '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è' : '–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è'}
- –¶–µ–Ω–∞: ${price} KZT
- –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
- [WhatsApp](https://api.whatsapp.com/send?phone=${phone}&text=–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!)
- [Telegram](https://t.me/${tg_username})

üë®‚Äçüë©‚Äçüë¶ *–£–¥–æ–±—Å—Ç–≤–∞*:
- –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫: ${fridge ? '–î–∞' : '–ù–µ—Ç'}
- –°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞: ${washing_machine ? '–î–∞' : '–ù–µ—Ç'}
- –ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞: ${microwave ? '–î–∞' : '–ù–µ—Ç'}
- –ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞: ${dishwasher ? '–î–∞' : '–ù–µ—Ç'}
- –£—Ç—é–≥: ${iron ? '–î–∞' : '–ù–µ—Ç'}
- –¢–µ–ª–µ–≤–∏–∑–æ—Ä: ${tv ? '–î–∞' : '–ù–µ—Ç'}
- Wi-Fi: ${wifi ? '–î–∞' : '–ù–µ—Ç'}
- –ü–ª–∏—Ç–∞: ${stove ? '–î–∞' : '–ù–µ—Ç'}
- –ö—É—Ö–Ω—è: ${kitchen ? '–î–∞' : '–ù–µ—Ç'}
- –ì–∞—Ä–¥–µ—Ä–æ–±: ${wardrobe ? '–î–∞' : '–ù–µ—Ç'}
- –î—É—à: ${shower ? '–î–∞' : '–ù–µ—Ç'}
- –†–∞–∑–¥–µ–ª—å–Ω—ã–π —Å–∞–Ω—É–∑–µ–ª: ${separate_toilet ? '–î–∞' : '–ù–µ—Ç'}
- –°–ø–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞: ${sleeping_places ? '–î–∞' : '–ù–µ—Ç'}

üë• *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ*:
- –î–ª—è —Å–µ–º—å–∏: ${family ? '–î–∞' : '–ù–µ—Ç'}
- –î–ª—è –æ–¥–Ω–æ–≥–æ: ${single ? '–î–∞' : '–ù–µ—Ç'}
- –ú–æ–∂–Ω–æ —Å –¥–µ—Ç—å–º–∏: ${with_child ? '–î–∞' : '–ù–µ—Ç'}
- –ú–æ–∂–Ω–æ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏: ${with_pets ? '–î–∞' : '–ù–µ—Ç'}
- –ö—É—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: ${smoke_allowed ? '–î–∞' : '–ù–µ—Ç'}
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ${max_guests}
`;


        //await saveToDatabase(data); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        
        adsData[chatId] = {
            message,
            photos: []
        };

        await bot.answerWebAppQuery(queryId, {  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            type: 'article',
            id: queryId,
            title: '–£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
            input_message_content: {
                message_text: '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
                parse_mode: 'Markdown'
            }
        });

        return res.status(200).json({});
    } catch (e) {
        console.log('Error:', e);
        return res.status(500).json({});
    }
});


const PORT = 8000;

app.listen(PORT, () => console.log('server started on PORT ' + PORT))

async function postADtoChannel(ad, chatId) {
    const trimmedMessage = ad.message?.length > 1024 
        ? ad.message.substring(0, ad.message.lastIndexOf(' ', 1024)) + '...' 
        : ad.message;

    const mediaGroup = ad.photos.map((fileId, index) => ({
        type: 'photo',
        media: fileId,
        caption: index === 0 ? trimmedMessage : '',
        parse_mode: 'Markdown'
    }));

    const messageOnChannel = await bot.sendMediaGroup(process.env.TELEGRAM_CHANNEL, mediaGroup);
    const messageId = messageOnChannel[0].message_id;
    const messageLink = `https://t.me/${process.env.TELEGRAM_CHANNEL.replace('@', '')}/${messageId}`;
    await bot.sendMessage(chatId, `–í–∞—à–µ [–æ–±—ä—è–≤–ª–µ–Ω–∏–µ](${messageLink}) –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ`, {parse_mode: 'Markdown'});

    console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ`);
}

async function approvePhotoAD(ad, chatId) {
    const trimmedMessage = ad.message?.length > 1024 
        ? ad.message.substring(0, ad.message.lastIndexOf(' ', 1024)) + '...' 
        : ad.message;

    const mediaGroup = ad.photos.map((fileId, index) => {
        return {
            type: 'photo',
            media: fileId,
            caption: index === 0 ? trimmedMessage : '',
            parse_mode: 'Markdown',
        };
    });

    await bot.sendMediaGroup(chatId, mediaGroup);

    await bot.sendMessage(chatId, '‚¨ÜÔ∏è –î–æ–±–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ', {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'approved' }, { text: '‚Ü©Ô∏è–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'add_photo' }],
              ],
            },
          });

    console.log('–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
}

async function approveAD(ad, chatId) {
    const trimmedMessage = ad.message?.length > 1024 
        ? ad.message.substring(0, ad.message.lastIndexOf(' ', 1024)) + '...' 
        : ad.message;

    const mediaGroup = ad.photos.map((fileId, index) => {
        return {
            type: 'photo',
            media: fileId,
            caption: index === 0 ? trimmedMessage : '',
            parse_mode: 'Markdown',
        };
    });

    await bot.sendMediaGroup(chatId, mediaGroup);

    await bot.sendMessage(chatId, '‚¨ÜÔ∏è –î–æ–±–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ', {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'approved' }],
              ],
            },
          });

    console.log('–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
}