const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const config = require('./config');
const dbManager = require('./db-manager');
const cron = require('node-cron');
const winston = require('winston');
const fs = require('fs');
const path = require('path');

const logDir = './logs';
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir);
}

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp({
      format: 'YYYY-MM-DD HH:mm:ss'
    }),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} ${level}: ${message}`;
    })
  ),
  transports: [
    new winston.transports.File({ filename: path.join(logDir, 'error.log'), level: 'error' }),
    new winston.transports.File({ filename: path.join(logDir, 'combined.log') })
  ]
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
});
process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
});

const bot = new TelegramBot(config.TELEGRAM_BOT_TOKEN, {polling: true});
const app = express();

app.use(express.json());
app.use(cors());
app.use(bodyParser.urlencoded({ extended: true }));

let adsData = {};
let photoTimers = {};

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
cron.schedule('*/10 * * * *', async () => { 
    //console.log('Starting notification schedule')
    try {
        await dbManager.checkForNewAds(bot);
    } catch (error) {
        logger.error(`Error during notification schedule: ${error}`);
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;
    const webAppUrl = `https://${config.DOMAIN}/form?chat_id=${chatId}`;

    try {
        if (text === '/start') {
            await dbManager.createNewUser(msg);
            const sentMessage = await bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${msg.from.first_name}! –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Ñ–æ—Ä–º—É ‚¨áÔ∏è`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üî∏–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µüî∏', web_app: { url: webAppUrl} }]
                    ]
                }
            });
            await bot.pinChatMessage(chatId, sentMessage.message_id);
        }

        if ((msg.media_group_id || msg.photo) && adsData[chatId]?.data.ad_type == 'rentOut') {
            const photoArray = msg.photo;
            const largestPhoto = photoArray[photoArray.length - 1];
            const fileId = largestPhoto.file_id;

            if (!adsData[chatId]) {
                adsData[chatId] = { photos: [], photoURLs: [] };
            }

            if (adsData[chatId].photos.length < 10) {
                adsData[chatId].photos.push(fileId);
            }

            if (photoTimers[chatId]) {
                clearTimeout(photoTimers[chatId]);
            }

            savePhotoIDsToDB(chatId, fileId);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
            photoTimers[chatId] = setTimeout(() => {

                if (adsData[chatId].photos.length === 10) {
                    approveAD(adsData[chatId], chatId);
                } else {
                    approvePhotoAD(adsData[chatId], chatId);
                }
                delete photoTimers[chatId];
            }, 2000);
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞:', err);
        logger.error(`Error processing message from ${chatId}: ${err}`);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
      }
});

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const userId = callbackQuery.from.id;
    const callbackData = callbackQuery.data;
    const currentPhotosCount = 10 - adsData[chatId]?.photos?.length;
    const city = adsData[chatId].data.city;
    const targetChannel = config.cityChannels[city];

    //const hasPostedToday = await checkCurrentDayAD(userId);

    try {
        if (callbackData === 'approved') {

            const chatMember = await bot.getChatMember(targetChannel, userId); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
                
            if (!['member', 'administrator', 'creator'].includes(chatMember.status)) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.sendMessage(chatId, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${targetChannel} –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è`);
                return;
            }

            if (adsData[chatId].photos && adsData[chatId].message) {
                const adId = await dbManager.saveADtoDB(adsData[chatId].data, adsData[chatId].photoURLs);
                const channelMessageId = await postADtoChannel(adsData[chatId], chatId, targetChannel);
                // await dbManager.checkForNewAds(bot); // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±—è—ä–≤–ª–µ–Ω–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                bot.answerCallbackQuery(callbackQuery.id, {text: '‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ', show_alert: false});
                dbManager.updateADpostedData(adId, channelMessageId);
                await bot.deleteMessage(chatId, messageId);
            }
        } else if (callbackData === 'add_photo') {
            if (adsData[chatId].photos && adsData[chatId].message) {
                await bot.sendMessage(chatId, `‚¨ÜÔ∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ ${currentPhotosCount} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
            }

        } else if (callbackData === 'receive_notification') {
            const searchCriteriaID = await dbManager.saveSearchCritireaToDB(adsData[chatId].data);
            bot.answerCallbackQuery(callbackQuery.id, {text: 'üíæ –ü–æ–∏—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', show_alert: false});
            bot.deleteMessage(chatId, messageId);

            const searchText = `–°–Ω–∏–º—É ${adsData[chatId].data.house_type === 'apartment' ? adsData[chatId].data.rooms + '-–∫–æ–º–Ω.–∫–≤–∞—Ä—Ç–∏—Ä—É' : adsData[chatId].data.house_type === 'room' ? '–∫–æ–º–Ω–∞—Ç—É' : '–¥–æ–º'} ${adsData[chatId].data.duration === 'long_time' ? '–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫' : '–ø–æ—Å—É—Ç–æ—á–Ω–æ'} –≤ –≥.${adsData[chatId].data.city}${adsData[chatId].data.district ? ', ' + adsData[chatId].data.district + ' —Ä-–Ω'  : ''}${adsData[chatId].data.microdistrict ? ', ' + adsData[chatId].data.microdistrict  : ''}
–¶–µ–Ω–∞: ${adsData[chatId].data.price_min}-${adsData[chatId].data.price_max} —Ç–≥.
`;

            const caption = `üîç –ü–æ–∏—Å–∫ ‚Ññ${searchCriteriaID} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n\`${searchText}\`\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–πüëá`;
            const inlineKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `delete_sc_${searchCriteriaID}` }]
                    ]
                }
            };
            await bot.sendMessage(chatId, caption, { parse_mode: 'Markdown', ...inlineKeyboard });

        } else if (callbackData === 'reject_notification') {
            bot.answerCallbackQuery(callbackQuery.id, {text: 'üóëÔ∏è –ü–æ–∏—Å–∫ —É–¥–∞–ª–µ–Ω', show_alert: false});
            bot.deleteMessage(chatId, messageId);

        } else if (callbackData.startsWith('delete_ad_')) {
            const channelMessageId = callbackData.split('_')[2];
            await bot.deleteMessage(targetChannel, channelMessageId);
            await bot.answerCallbackQuery(callbackQuery.id, {text: '‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞', show_alert: false});
            await bot.sendMessage(chatId, '‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞');
            await dbManager.deactivateAd(channelMessageId);
            //await bot.deleteMessage(chatId, messageId);

        } else if (callbackData.startsWith('delete_sc_')) {
            const searchCriteriaID = callbackData.split('_')[2];
            await dbManager.deactivateSC(searchCriteriaID);
            await bot.answerCallbackQuery(callbackQuery.id, {text: '‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–∏—Å–∫–∞', show_alert: false});
            await bot.sendMessage(chatId, `‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–∏—Å–∫–∞ ‚Ññ${searchCriteriaID}`);
            await bot.deleteMessage(chatId, messageId);
            await bot.answerCallbackQuery(callbackQuery.id, '‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–∏—Å–∫–∞');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞:', err);
        logger.error(`Error processing callback query from ${chatId}: ${err}`);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
      }
});

app.post('/web-data', async (req, res) => {
    const data = req.body;
    const hasPostedToday = await dbManager.checkCurrentDayAD(data.user.id);
    //console.log('Received data:', JSON.stringify(data));

    const roomTypeText = (data.room_type === 'room' ? '' : data.room_type === 'bed_space' ? ' (–∫–æ–π–∫–æ-–º–µ—Å—Ç–æ)' : '');
    const roomLocationText = data.room_location === 'apartment' ? '' : 
                             data.room_location === 'hostel' ? '–≤ —Ö–æ—Å—Ç–µ–ª–µ' : 
                             data.room_location === 'hotel' ? '–≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ' : '';

    try {
        const message = `
üè† *–°–¥–∞–µ—Ç—Å—è* ${data.house_type === 'apartment' ? data.rooms + '-–∫–æ–º–Ω.–∫–≤–∞—Ä—Ç–∏—Ä–∞' : data.house_type === 'room' ? '–∫–æ–º–Ω–∞—Ç–∞' + roomTypeText + (roomLocationText ? ' ' + roomLocationText : '') : '–¥–æ–º'} ${data.duration === 'long_time' ? '–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫' : '–ø–æ—Å—É—Ç–æ—á–Ω–æ'}, ${data.area} –º¬≤, ${data.floor_current}/${data.floor_total} —ç—Ç–∞–∂${data.bed_capacity ? ', —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç - ' + data.bed_capacity : ''}
*–ê–¥—Ä–µ—Å:* –≥.${data.city}, ${data.district} —Ä-–Ω, ${data.microdistrict}, ${data.address}
*–°–¥–∞–µ—Ç:* ${data.author === 'owner' ? '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫': '–ø–æ—Å—Ä–µ–¥–Ω–∏–∫'}
*–¶–µ–Ω–∞:* ${data.price} ‚Ç∏
*–î–µ–ø–æ–∑–∏—Ç:* ${data.deposit ? `${data.deposit_value}%` : '–Ω–µ—Ç'}
*–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone} ${[ data.whatsapp ? `[WhatsApp](https://api.whatsapp.com/send?phone=${data.phone})` : '', data.tg_username ? `[Telegram](https://t.me/${data.tg_username})` : ''].filter(Boolean).join(' ')}
üõãÔ∏è *–£–¥–æ–±—Å—Ç–≤–∞*: ${[
    data.fridge ? '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫' : '',
    data.washing_machine ? '—Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞' : '',
    data.microwave ? '–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∞—è –ø–µ—á—å' : '',
    data.dishwasher ? '–ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞' : '',
    data.iron ? '—É—Ç—é–≥' : '',
    data.tv ? '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä' : '',
    data.wifi ? 'Wi-Fi' : '',
    data.stove ? '–ø–ª–∏—Ç–∞' : '',
    data.shower ? '–¥—É—à' : '',
    data.separate_toilet ? '—Ä–∞–∑–¥–µ–ª—å–Ω—ã–π —Å–∞–Ω—É–∑–µ–ª' : '',
    data.bed_linen ? '–ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ' : '',
    data.towels ? '–ø–æ–ª–æ—Ç–µ–Ω—Ü–∞' : '',
    data.hygiene_items ? '—Å—Ä–µ–¥—Å—Ç–≤–∞ –≥–∏–≥–∏–µ–Ω—ã' : '',
    data.kitchen ? '–∫—É—Ö–Ω—è' : '',
    data.wardrobe ? '—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã' : '',
    data.sleeping_places ? '—Å–ø–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞' : ''
].filter(Boolean).join(', ')}
üìú *–ü—Ä–∞–≤–∏–ª–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è*: ${[
    data.family ? '–¥–ª—è —Å–µ–º—å–∏' : '',
    data.single ? '–¥–ª—è –æ–¥–Ω–æ–≥–æ' : '',
    data.with_child ? '–º–æ–∂–Ω–æ —Å –¥–µ—Ç—å–º–∏' : '',
    data.with_pets ? '–º–æ–∂–Ω–æ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏' : '',
    data.max_guests ? `–º–∞–∫—Å. –≥–æ—Å—Ç–µ–π: ${data.max_guests}` : ''
].filter(Boolean).join(', ')}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ*
${data.description}
`;

const message_rentIn = `
*–°–Ω–∏–º—É* ${data.house_type === 'apartment' ? data.rooms + '-–∫–æ–º–Ω.–∫–≤–∞—Ä—Ç–∏—Ä—É' : data.house_type === 'room' ? '–∫–æ–º–Ω–∞—Ç—É' : '–¥–æ–º'} ${data.duration === 'long_time' ? '–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫' : '–ø–æ—Å—É—Ç–æ—á–Ω–æ'} –≤ –≥.${data.city}${data.district ? ', ' + data.district + ' —Ä-–Ω'  : ''}${data.microdistrict ? ', ' + data.microdistrict  : ''}
*–¶–µ–Ω–∞:* ${data.price_min}-${data.price_max} ‚Ç∏
*–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}
`;

        adsData[data.chatId] = {
            data: data,
            message,
            photos: [],
            photoURLs: []
        };

        if (data.ad_type === 'rentOut') {
            await bot.answerWebAppQuery(data.queryId, {
                type: 'article',
                id: data.queryId,
                title: '–£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
                input_message_content: {
                    message_text: message,
                    parse_mode: 'Markdown'
                }
            });

            if (hasPostedToday.canPost) {
                await bot.sendMessage(data.chatId, 'üì∏ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∂–∏–ª—å—è (–¥–æ 10 —à—Ç.)');
            } else {
                await bot.sendMessage(data.chatId, `‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å!\n–°–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–æ ${hasPostedToday.availableToPostDate}`);
            }
            
        } else if (data.ad_type === 'rentIn') {
            await bot.answerWebAppQuery(data.queryId, {
                type: 'article',
                id: data.queryId,
                title: '–£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
                input_message_content: {
                    message_text: message_rentIn,
                    parse_mode: 'Markdown'
                }
            });
            
            await bot.sendMessage(data.chatId, '–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø–æ–∏—Å–∫–µ –∂–∏–ª—å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ. –û–¥–Ω–∞–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∂–∏–ª—å—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.', {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üîî–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'receive_notification' }, { text: '‚õî–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: 'reject_notification' }],
                  ],
                },
              })
        }


        return res.status(200).json({});
    } catch (e) {
        console.log('Error:', e);
        logger.error(`Error processing callback query from ${chatId}: ${e}`);
        return res.status(500).json({});
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/userIsValid', (req, res) => {
    const { hash, checkDataString } = req.query;

    const secretKey = crypto.createHmac('sha256', BOT_TOKEN + "WebAppData").digest('hex');

    const calculatedHash = crypto.createHmac('sha256', secretKey).update(checkDataString).digest('hex');

    if (calculatedHash === hash) {
        return res.json({ result: true });
    } else {
        return res.json({ result: false });
    }
});

const PORT = config.PORT;

app.listen(PORT, () => {
    console.log(`Server started on PORT ${PORT} at ${new Date().toLocaleString()}`);
    logger.info(`Server started on PORT ${PORT} at ${new Date().toLocaleString()}`);
  });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async function postADtoChannel(ad, chatId, targetChannel) {
    const mediaGroup = await createMediaGroup(ad);
    const messageOnChannel = await bot.sendMediaGroup(targetChannel, mediaGroup);
    const messageId = messageOnChannel[0].message_id;
    const messageLink = `https://t.me/${targetChannel.replace('@', '')}/${messageId}`;

    const caption = `üéâ –í–∞—à–µ [–æ–±—ä—è–≤–ª–µ–Ω–∏–µ](${messageLink}) —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\n\nüè† –ü–æ—Å–ª–µ —Å–¥–∞—á–∏ –∂–∏–ª—å—è –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ ‚§µÔ∏è`;

    const inlineKeyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üóëÔ∏è–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: `delete_ad_${messageId}` }]
            ]
        }
    };

    await bot.sendMessage(chatId, caption, { parse_mode: 'Markdown', ...inlineKeyboard });
    
    console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ ${messageId} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ`);
    return messageId;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
async function approvePhotoAD(ad, chatId) {
    const currentPhotosCount = 10 - adsData[chatId].photos.length;
    const mediaGroup = await createMediaGroup(ad);

    await bot.sendMediaGroup(chatId, mediaGroup);

    await bot.sendMessage(chatId, `‚¨ÜÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ ${currentPhotosCount} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ`, {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'approved' }, { text: '‚Ü©Ô∏è–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'add_photo' }],
              ],
            },
          });
    console.log('–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
async function approveAD(ad, chatId) {
    const mediaGroup = await createMediaGroup(ad);

    await bot.sendMediaGroup(chatId, mediaGroup);

    await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª', {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'approved' }],
              ],
            },
          });

    console.log('–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
}

async function createMediaGroup(ad, includeCaption = true) {
    const trimmedMessage = ad.message?.length > 1024 
        ? ad.message.substring(0, ad.message.lastIndexOf(' ', 1024)) + '...' 
        : ad.message;

    return ad.photos.map((fileId, index) => ({
        type: 'photo',
        media: fileId,
        caption: includeCaption && index === 0 ? trimmedMessage : '',
        parse_mode: 'Markdown'
    }));
}

async function savePhotoIDsToDB(chatId, fileId) {

        //const photoUrl = await getPhotoUrl(fileId);
        adsData[chatId].photoURLs.push(fileId);
}

async function getPhotoUrl(fileId) {
    const file = await bot.getFile(fileId);
    return `https://api.telegram.org/file/bot${config.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
}