const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const config = require('./config');
const { createNewUser, saveADtoDB, checkCurrentDayAD, updateADpostedDate, saveSearchCritireaToDB } = require('./db-manager');

const bot = new TelegramBot(config.TELEGRAM_BOT_TOKEN, {polling: true});
const app = express();

app.use(express.json());
app.use(cors());

let adsData = {};
let photoTimers = {};

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const webAppUrl = `https://5b06-5-251-196-243.ngrok-free.app/form?chat_id=${chatId}`;

    if (text === '/start') {
        await createNewUser(msg.from.id, msg.from.username, msg.from.first_name, !!msg.from.is_premium)
        const sentMessage = await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Ñ–æ—Ä–º—É ‚¨áÔ∏è', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üî∏–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µüî∏', web_app: { url: webAppUrl} }]
                ]
            }
        });
        await bot.pinChatMessage(chatId, sentMessage.message_id);
    }

    if (msg.media_group_id || msg.photo) {
        const photoArray = msg.photo;
        const largestPhoto = photoArray[photoArray.length - 1];
        const fileId = largestPhoto.file_id;

        if (!adsData[chatId]) {
            adsData[chatId] = { photos: [], photoURLs: [] };
        }

        if (adsData[chatId].photos.length < 10) {
            adsData[chatId].photos.push(fileId);
        }

        if (photoTimers[chatId]) {
            clearTimeout(photoTimers[chatId]);
        }

        savePhotoIDsToDB(chatId, fileId);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        photoTimers[chatId] = setTimeout(() => {

            if (adsData[chatId].photos.length === 10) {
                approveAD(adsData[chatId], chatId);
            } else {
                approvePhotoAD(adsData[chatId], chatId);
            }
            delete photoTimers[chatId]; // –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        }, 2000);
    }

});

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    const currentPhotosCount = 10 - adsData[chatId]?.photos?.length;

    const hasPostedToday = await checkCurrentDayAD(userId);

    try {
        switch(data) {
            case 'approved':
                if (!hasPostedToday && adsData[chatId].photos && adsData[chatId].message) {
                    const adId = await saveADtoDB(adsData[chatId].data, adsData[chatId].photoURLs, messageId);
                    postADtoChannel(adsData[chatId], chatId);
                    updateADpostedDate(adId);
                    await bot.deleteMessage(chatId, messageId);
                } else {
                    await saveADtoDB(adsData[chatId].data, adsData[chatId].photoURLs, messageId);
                    await bot.sendMessage(chatId, '–í—ã —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è. –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∑–∞–≤—Ç—Ä–∞.');
                    await bot.deleteMessage(chatId, messageId);
                }
                break;
            case 'add_photo':
                if (adsData[chatId].photos && adsData[chatId].message) {
                    await bot.sendMessage(chatId, `‚¨ÜÔ∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ ${currentPhotosCount} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
                }
                break;
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞:', err);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
      }
});

app.post('/web-data', async (req, res) => {
    const data = req.body;
    //console.log('Received data:', JSON.stringify(data));
    try {
        const message = `
üè† *–°–¥–∞–µ—Ç—Å—è* ${data.house_type === 'apartment' ? data.rooms + '-–∫–æ–º–Ω.–∫–≤–∞—Ä—Ç–∏—Ä–∞' : data.house_type === 'room' ? '–∫–æ–º–Ω–∞—Ç–∞' : '–¥–æ–º'} ${data.duration === 'long_time' ? '–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫' : '–ø–æ—Å—É—Ç–æ—á–Ω–æ'}, ${data.area} –º¬≤, ${data.floor_current}/${data.floor_total} —ç—Ç–∞–∂
*–ê–¥—Ä–µ—Å:* –≥.${data.city}, ${data.district} —Ä-–Ω, ${data.microdistrict}, ${data.address}
*–°–¥–∞–µ—Ç:* ${data.author === 'owner' ? '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫': '–ø–æ—Å—Ä–µ–¥–Ω–∏–∫'}
*–¶–µ–Ω–∞:* ${data.price} ${data.currency}
*–î–µ–ø–æ–∑–∏—Ç:* ${data.deposit ? `${data.deposit_value}%` : '–Ω–µ—Ç'}
*–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone} ${[ data.whatsapp ? `[WhatsApp](https://api.whatsapp.com/send?phone=${data.phone})` : '', data.tg_username ? `[Telegram](https://t.me/${data.tg_username})` : ''].filter(Boolean).join(' ')}
üõãÔ∏è *–£–¥–æ–±—Å—Ç–≤–∞*: ${[
    data.fridge ? '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫' : '',
    data.washing_machine ? '—Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞' : '',
    data.microwave ? '–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∞—è –ø–µ—á—å' : '',
    data.dishwasher ? '–ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞' : '',
    data.iron ? '—É—Ç—é–≥' : '',
    data.tv ? '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä' : '',
    data.wifi ? 'Wi-Fi' : '',
    data.stove ? '–ø–ª–∏—Ç–∞' : '',
    data.shower ? '–¥—É—à' : '',
    data.separate_toilet ? '—Ä–∞–∑–¥–µ–ª—å–Ω—ã–π —Å–∞–Ω—É–∑–µ–ª' : '',
    data.bed_linen ? '–ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ' : '',
    data.towels ? '–ø–æ–ª–æ—Ç–µ–Ω—Ü–∞' : '',
    data.hygiene_items ? '—Å—Ä–µ–¥—Å—Ç–≤–∞ –≥–∏–≥–∏–µ–Ω—ã' : '',
    data.kitchen ? '–∫—É—Ö–Ω—è' : '',
    data.wardrobe ? '—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã' : '',
    data.sleeping_places ? '—Å–ø–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞' : ''
].filter(Boolean).join(', ')}
üìú *–ü—Ä–∞–≤–∏–ª–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è*: ${[
    data.family ? '–¥–ª—è —Å–µ–º—å–∏' : '',
    data.single ? '–¥–ª—è –æ–¥–Ω–æ–≥–æ' : '',
    data.with_child ? '–º–æ–∂–Ω–æ —Å –¥–µ—Ç—å–º–∏' : '',
    data.with_pets ? '–º–æ–∂–Ω–æ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏' : '',
    data.max_guests ? `–º–∞–∫—Å. –≥–æ—Å—Ç–µ–π: ${data.max_guests}` : ''
].filter(Boolean).join(', ')}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ*
${data.description}
`;

        adsData[data.chatId] = {
            data: data,
            message,
            photos: [],
            photoURLs: []
        };

        if (data.ad_type === 'rentOut') {
            await bot.answerWebAppQuery(data.queryId, {
                type: 'article',
                id: data.queryId,
                title: '–£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
                input_message_content: {
                    message_text: 'üìù –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
                    parse_mode: 'Markdown'
                }
            });

            await bot.sendMessage(data.chatId, '‚ö†Ô∏è –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π')
            
        } else if (data.ad_type === 'rentIn') {
            await bot.answerWebAppQuery(data.queryId, {
                type: 'article',
                id: data.queryId,
                title: '–£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
                input_message_content: {
                    message_text: '–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö',
                    parse_mode: 'Markdown'
                }
            });

            saveSearchCritireaToDB(data); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –±–¥
            
            await bot.sendMessage(data.chatId, '–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø–æ–∏—Å–∫–µ –∂–∏–ª—å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ. –û–¥–Ω–∞–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∂–∏–ª—å—è.')
        }


        return res.status(200).json({});
    } catch (e) {
        console.log('Error:', e);
        return res.status(500).json({});
    }
});


const PORT = 8000;

app.listen(PORT, () => console.log('server started on PORT ' + PORT))

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async function postADtoChannel(ad, chatId) {
    const mediaGroup = await createMediaGroup(ad);
    const messageOnChannel = await bot.sendMediaGroup(config.TELEGRAM_CHANNEL, mediaGroup);
    const messageId = messageOnChannel[0].message_id;
    const messageLink = `https://t.me/${config.TELEGRAM_CHANNEL.replace('@', '')}/${messageId}`;
    await bot.sendMessage(chatId, `–í–∞—à–µ [–æ–±—ä—è–≤–ª–µ–Ω–∏–µ](${messageLink}) —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!`, {parse_mode: 'Markdown'});

    console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
async function approvePhotoAD(ad, chatId) {
    const currentPhotosCount = 10 - adsData[chatId].photos.length;
    const mediaGroup = await createMediaGroup(ad);

    await bot.sendMediaGroup(chatId, mediaGroup);

    await bot.sendMessage(chatId, `‚¨ÜÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ ${currentPhotosCount} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ`, {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'approved' }, { text: '‚Ü©Ô∏è–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'add_photo' }],
              ],
            },
          });
    console.log('–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
async function approveAD(ad, chatId) {
    const mediaGroup = await createMediaGroup(ad);

    await bot.sendMediaGroup(chatId, mediaGroup);

    await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª', {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'approved' }],
              ],
            },
          });

    console.log('–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
}

async function createMediaGroup(ad, includeCaption = true) {
    const trimmedMessage = ad.message?.length > 1024 
        ? ad.message.substring(0, ad.message.lastIndexOf(' ', 1024)) + '...' 
        : ad.message;

    return ad.photos.map((fileId, index) => ({
        type: 'photo',
        media: fileId,
        caption: includeCaption && index === 0 ? trimmedMessage : '',
        parse_mode: 'Markdown'
    }));
}

async function savePhotoIDsToDB(chatId, fileId) {

        //const photoUrl = await getPhotoUrl(fileId);
        adsData[chatId].photoURLs.push(fileId);
}

async function getPhotoUrl(fileId) {
    const file = await bot.getFile(fileId);
    return `https://api.telegram.org/file/bot${config.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
}